// –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let gameState = {
    smileys: 100,
    dollars: 0,
    smileysPerClick: 1,
    passiveIncome: 0,
    currentSmiley: 'üòÄ',
    ownedEmotions: ['üòÄ'],
    inventory: {},
    emotionLevels: {},
    totalClicks: 0,
    duplicateShards: 0,
    masteryShards: 0,
    currentLeague: 'bronze',
    upgrades: {
        'click-power': { level: 0, cost: 100, effect: 1, name: '–£—Å–∏–ª–∏—Ç–µ–ª—å –∫–ª–∏–∫–∞', description: '+1 —Å–º–∞–π–ª–∏–∫ –∑–∞ –∫–ª–∏–∫' },
        'auto-clicker': { level: 0, cost: 500, effect: 1, name: '–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä', description: '+1 —Å–º–∞–π–ª–∏–∫ –≤ —Å–µ–∫—É–Ω–¥—É' },
        'double-click': { level: 0, cost: 1000000000000, effect: 2, name: '–î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫', description: '–£–¥–≤–∞–∏–≤–∞–µ—Ç —Å–∏–ª—É –∫–ª–∏–∫–∞' },
        'mega-click': { level: 0, cost: 10000, effect: 5, name: '–ú–µ–≥–∞ –∫–ª–∏–∫', description: '+5 —Å–º–∞–π–ª–∏–∫–æ–≤ –∑–∞ –∫–ª–∏–∫' },
        'dollar-boost': { level: 0, cost: 500, effect: 0.1, name: '–î–æ–ª–ª–∞—Ä–æ–≤—ã–π –±—É—Å—Ç', description: '+0.1$ –∑–∞ –∫–ª–∏–∫', currency: 'dollars' }
    },
    cases: {
        'heart': { name: '–°–µ—Ä–¥–µ—á–Ω—ã–π –∫–µ–π—Å', cost: 5000, emotions: ['üòò', 'ü•∞', 'üòç'] },
        'lim1': { name: '–õ–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω—ã–π –∫–µ–π—Å (–¥–æ 01.11.2025)', cost: 100, emotions: [':*', ':]', ':[', '>:)', '>:(', ':3', '>:3'] },
        'cool': { name: '–ö—Ä—É—Ç–æ–π –∫–µ–π—Å', cost: 1000, emotions: ['üòõ', 'üòù', 'üòú', 'ü§™', 'ü•µ', 'ü•∂', 'ü§Ø'] },
        'hand': { name: '–†—É—á–Ω–æ–π –∫–µ–π—Å', cost: 750, emotions: ['ü§´', 'ü§î', 'ü§≠', 'ü•±', 'ü§ó'] },
        'angry': { name: '–ó–ª–æ–π –∫–µ–π—Å', cost: 80000, emotions: ['üò†', 'üò°', 'ü§¨', 'üòà', 'üëø'] },
        'animal': { name: '–ö–µ–π—Å —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏', cost: 1000, emotions: ['üò∫', 'üò∏', 'üòπ', 'üòª', 'üòº', 'üòΩ', 'üôÄ', 'üòø', 'üòæ'], currency: 'dollars' },
        'mixed': { name: '–ö–µ–π—Å —Å —Ä–∞–∑–Ω—ã–º–∏ —ç–º–æ—Ü–∏—è–º–∏', cost: 1500, emotions: ['üò™', 'ü§ß', 'ü§í', 'ü§ï', 'üò∑', 'ü§•', 'üòá', 'ü§†', 'ü§ë', 'ü§ì', 'üòé', 'ü•∏', 'ü§°', 'üëª', 'üíÄ', '‚ò†Ô∏è'] },
        'premium': { name: '–ü—Ä–µ–º–∏—É–º –∫–µ–π—Å', cost: 10, emotions: ['üíé', 'üëë', '‚≠ê'], currency: 'dollars' }
    },
    shop: {
        'üòÉ': { cost: 100, name: '–£–ª—ã–±–∫–∞', description: '–ë–∞–∑–æ–≤–∞—è —É–ª—ã–±–∫–∞' },
        ':)': { cost: 1, name: '–õ–∏–º–∏—Ç1', description: '–õ–∏–º–∏—Ç1' },
        ':(': { cost: 1, name: '–ª–∏–º–∏—Ç2', description: '–ª–∏–º–∏—Ç2' },
        'üòÑ': { cost: 200, name: '–®–∏—Ä–æ–∫–∞—è —É–ª—ã–±–∫–∞', description: '–ï—â–µ —à–∏—Ä–µ —É–ª—ã–±–∫–∞' },
        'üòÅ': { cost: 300, name: '–†–∞–¥–æ—Å—Ç—å', description: '–†–∞–¥–æ—Å—Ç–Ω–∞—è —ç–º–æ—Ü–∏—è' },
        'üòÜ': { cost: 400, name: '–°–º–µ—Ö', description: '–°–º–µ—é—â–∞—è—Å—è —ç–º–æ—Ü–∏—è' },
        'üòÖ': { cost: 500, name: '–û–±–ª–µ–≥—á–µ–Ω–∏–µ', description: '–£–ª—ã–±–∫–∞ —Å –æ–±–ª–µ–≥—á–µ–Ω–∏–µ–º' },
        'üòÇ': { cost: 1000, name: '–°–ª–µ–∑—ã —Ä–∞–¥–æ—Å—Ç–∏', description: '–°–º–µ—Ö –¥–æ —Å–ª–µ–∑' },
        'ü§£': { cost: 2000, name: '–ö–∞—Ç–∞–Ω–∏–µ –æ—Ç —Å–º–µ—Ö–∞', description: '–ö–∞—Ç–∞—é—Å—å –ø–æ –ø–æ–ª—É –æ—Ç —Å–º–µ—Ö–∞' },
        'üò≠': { cost: 1500, name: '–ì—Ä–æ–º–∫–∏–π –ø–ª–∞—á', description: '–ì—Ä–æ–º–∫–æ –ø–ª–∞—á—É' },
        'üòó': { cost: 2500, name: '–ü–æ—Ü–µ–ª—É–π', description: '–í–æ–∑–¥—É—à–Ω—ã–π –ø–æ—Ü–µ–ª—É–π' },
        'üòô': { cost: 3500, name: '–†–∞–¥–æ—Å—Ç–Ω—ã–π –ø–æ—Ü–µ–ª—É–π', description: '–†–∞–¥–æ—Å—Ç–Ω—ã–π –≤–æ–∑–¥—É—à–Ω—ã–π –ø–æ—Ü–µ–ª—É–π' },
        'üòö': { cost: 4500, name: '–ó–∞–∫—Ä—ã—Ç—ã–µ –≥–ª–∞–∑–∞ –ø–æ—Ü–µ–ª—É–π', description: '–ü–æ—Ü–µ–ª—É–π —Å –∑–∞–∫—Ä—ã—Ç—ã–º–∏ –≥–ª–∞–∑–∞–º–∏' },
        'ü§©': { cost: 5000, name: '–ó–≤–µ–∑–¥–Ω—ã–µ –≥–ª–∞–∑–∞', description: '–ì–ª–∞–∑–∞-–∑–≤–µ–∑–¥—ã' },
        'üôÇ': { cost: 3000, name: '–õ–µ–≥–∫–∞—è —É–ª—ã–±–∫–∞', description: '–°–ª–µ–≥–∫–∞ —É–ª—ã–±–∞—é—â–µ–µ—Å—è –ª–∏—Ü–æ' },
        'ü•≤': { cost: 1800, name: '–£–ª—ã–±–∫–∞ —Å–æ —Å–ª–µ–∑–æ–π', description: '–£–ª—ã–±–∫–∞ —Å–æ —Å–ª–µ–∑–æ–π —Ä–∞–¥–æ—Å—Ç–∏' },
        'üòä': { cost: 2500, name: '–°–∏—è—é—â–∞—è —É–ª—ã–±–∫–∞', description: '–°–∏—è—é—â–∞—è —É–ª—ã–±–∫–∞' },
        '‚ò∫Ô∏è': { cost: 5000, name: '–°—á–∞—Å—Ç–ª–∏–≤–æ–µ –ª–∏—Ü–æ', description: '–°—á–∞—Å—Ç–ª–∏–≤–æ–µ –ª–∏—Ü–æ' },
        'üòå': { cost: 4000, name: '–û–±–ª–µ–≥—á–µ–Ω–∏–µ', description: '–õ–∏—Ü–æ —Å –æ–±–ª–µ–≥—á–µ–Ω–∏–µ–º' },
        'üòè': { cost: 5000, name: '–£—Ö–º—ã–ª–∫–∞', description: '–£—Ö–º—ã–ª—è—é—â–µ–µ—Å—è –ª–∏—Ü–æ' },
        'ü§§': { cost: 7000, name: '–°–ª—é–Ω–∏', description: '–ü—É—Å–∫–∞–µ—Ç —Å–ª—é–Ω–∏' },
        'üòî': { cost: 5000, name: '–†–∞—Å—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π', description: '–†–∞—Å—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ' },
        'ü•¥': { cost: 12000, name: '–ü—å—è–Ω—ã–π', description: '–ü—å—è–Ω–æ–µ –ª–∏—Ü–æ' },
        'üò¨': { cost: 1250, name: '–ì—Ä–∏–º–∞—Å–∞', description: '–ì—Ä–∏–º–∞—Å–Ω–∏—á–∞—é—â–µ–µ –ª–∏—Ü–æ' },
        'üòë': { cost: 3000, name: '–ë–µ–∑—Ä–∞–∑–ª–∏—á–∏–µ', description: '–ë–µ–∑—Ä–∞–∑–ª–∏—á–Ω–æ–µ –ª–∏—Ü–æ' },
        'üòê': { cost: 250, name: '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ', description: '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ª–∏—Ü–æ' },
        'üôÑ': { cost: 500, name: '–ó–∞–∫–∞—Ç—ã–≤–∞–Ω–∏–µ –≥–ª–∞–∑', description: '–ó–∞–∫–∞—Ç—ã–≤–∞–µ—Ç –≥–ª–∞–∑–∞' },
        'üòí': { cost: 1000, name: '–ù–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ', description: '–ù–µ–¥–æ–≤–æ–ª—å–Ω–æ–µ –ª–∏—Ü–æ' },
        'ü§®': { cost: 1075, name: '–ü–æ–¥–Ω—è—Ç–∞—è –±—Ä–æ–≤—å', description: '–õ–∏—Ü–æ —Å –ø–æ–¥–Ω—è—Ç–æ–π –±—Ä–æ–≤—å—é' },
        'üßê': { cost: 14000, name: '–ú–æ–Ω–æ–∫–ª—å', description: '–õ–∏—Ü–æ —Å –º–æ–Ω–æ–∫–ª–µ–º' },
        '‚òπÔ∏è': { cost: 4000, name: '–ù–∞—Ö–º—É—Ä–µ–Ω–Ω—ã–π', description: '–ù–∞—Ö–º—É—Ä–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ' },
        'üôÅ': { cost: 4999, name: '–õ–µ–≥–∫–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', description: '–°–ª–µ–≥–∫–∞ —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ' },
        'üòï': { cost: 5000, name: '–ó–∞–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ', description: '–°–º—É—â–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ' },
        'üò≥': { cost: 10000, name: '–ü–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏–µ', description: '–ü–æ–∫—Ä–∞—Å–Ω–µ–≤—à–µ–µ –ª–∏—Ü–æ' },
        'ü´Ç': { cost: 50, name: '–û–±—ä—è—Ç–∏—è', description: '–û—Å–æ–±–∞—è —ç–º–æ—Ü–∏—è', currency: 'duplicateShards' },
        'üí´': { cost: 500, name: '–ü—Ä–µ–º–∏—É–º —ç–º–æ—Ü–∏—è', description: '–≠–∫—Å–∫–ª—é–∑–∏–≤', currency: 'dollars' }
    },
    templeShop: {
        'master-click': { cost: 10, name: '–ú–∞—Å—Ç–µ—Ä—Å–∫–∏–π –∫–ª–∏–∫', description: '+10 —Å–º–∞–π–ª–∏–∫–æ–≤ –∑–∞ –∫–ª–∏–∫', type: 'upgrade', effect: 10 },
        'master-star': { cost: 25, name: '–ó–≤–µ–∑–¥–∞ –º–∞—Å—Ç–µ—Ä–∞', description: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è —ç–º–æ—Ü–∏—è', type: 'emotion', emotion: 'üåü' }
    }
};

// –°–∏—Å—Ç–µ–º–∞ –ª–∏–≥
const leagues = {
    'bronze': { name: '–ë—Ä–æ–Ω–∑–∞', clicks: 0, icon: 'ü•â' },
    'silver': { name: '–°–µ—Ä–µ–±—Ä–æ', clicks: 5000, icon: 'ü•à' },
    'gold': { name: '–ó–æ–ª–æ—Ç–æ', clicks: 15000, icon: 'ü•á' },
    'ruby': { name: '–†—É–±–∏–Ω', clicks: 30000, icon: 'üî¥' },
    'sapphire': { name: '–°–∞–ø—Ñ–∏—Ä', clicks: 50000, icon: 'üîµ' },
    'amethyst': { name: '–ê–º–µ—Ç–∏—Å—Ç', clicks: 75000, icon: 'üü£' },
    'emerald': { name: '–ò–∑—É–º—Ä—É–¥', clicks: 100000, icon: 'üíö' },
    'diamond': { name: '–ê–ª–º–∞–∑', clicks: 1500000, icon: 'üíé' },
    'platinum': { name: '–ü–ª–∞—Ç–∏–Ω–∞', clicks: 20000000, icon: 'üëë' },
    'obsidian': { name: '–û–±—Å–∏–¥–∏–∞–Ω', clicks: 300000000, icon: '‚ö´' }
};

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞–Ω—Ç–∏-–∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞
let lastClickTime = 0;
let clickCount = 0;
let cheatDetectionActive = false;
let clickTimes = [];
let cheatBlockTime = 0;

// –°–∏—Å—Ç–µ–º–∞ —Ä–µ–ø–ª–∏–∫
let replicas = [
    "–ü—Ä–∏–≤–µ—Ç!",
    "–ú–µ–Ω—è –∑–æ–≤—É—Ç BoccNK –∏ —è —Å–æ–∑–¥–∞—Ç–µ–ª—å —ç—Ç–æ–π –∏–≥—Ä—ã.",
    "–¢—ã –≤ –∫—É—Ä—Å–µ —á—Ç–æ —Ç—É—Ç –µ—Å—Ç—å –∞–Ω—Ç–∏—á–∏—Ç?",
    "–≠–π, –≥–¥–µ –º–æ–π —Ä—é–∫–∑–∞–∫?!",
    "–û, –≤–æ—Ç –æ–Ω!",
    "–°–ª—É—à–∞–π, –∞ —Ç—ã –∫—Ç–æ?",
    "–≠—Ç—É –∏–≥—Ä—É –¥–µ–ª–∞–ª –Ω–µ —è –æ–¥–∏–Ω!",
    "–ú–Ω–µ –ø–æ–º–æ–≥–∞–ª –∫–æ–µ-–∫—Ç–æ...",
    "–ó–Ω–∞–µ—à—å –∫—Ç–æ?",
    "–ù–µ—Ç?",
    "–≠—Ç–æ..",
    "DeepSeek!",
    "–ö–ª–∏–∫–∞–π –±—ã—Å—Ç—Ä–µ–µ!",
    "–°–æ–±–µ—Ä–∏ –≤—Å–µ —ç–º–æ—Ü–∏–∏!",
    "–ò—Ö 93",
    "–û–¥–Ω—É —è —É–¥–∞–ª–∏–ª >:)",
    "–¢–æ –µ—Å—Ç—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ–≥–æ 92",
    "–ê —Ö–æ—á–µ—à—å —ç–º–æ—Ü–∏—é?",
    "–ù—É –∏–≥—Ä–∞–π, –∞ —è –ø–æ–¥—É–º–∞—é.",
    "–ë–∞–ª–∞–Ω—Å–∏—Ä—É–π –º–µ–∂–¥—É —Å–º–∞–π–ª–∏–∫–∞–º–∏ –∏ –¥–æ–ª–ª–∞—Ä–∞–º–∏!",
    "–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É!",
    "–ü—Ä–æ–∫–∞—á–∏–≤–∞–π –ª–∏–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å–∫–æ–ª–∫–æ–≤ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞!",
    "–£—Ä–æ–≤–Ω–∏ —ç–º–æ—Ü–∏–π –¥–∞—é—Ç –±–æ–Ω—É—Å—ã!",
    "–ö—Å—Ç–∞—Ç–∏, –∫–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –∞–ª–º–∞–∑–∏–∫–µ?",
    "–ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —É–ª—É—á—à–µ–Ω–∏—è!",
    "–ë–µ–∑ –Ω–∏—Ö –∫–ª–∏–∫–µ—Ä –Ω–µ –∫–ª–∏–∫–µ—Ä",
    "–ò–¥–∏ –ø–æ–∫—É–ø–∞–π –¥–æ–ª–ª–∞—Ä—ã –ø–æ–∫–∞ –Ω–µ –≤–∑–ª–µ—Ç–µ–ª–∏!",
    "–Ø —Å–µ—Ä—å—ë–∑–Ω–æ",
    "–ß—Ç–æ —Ç–µ–±–µ, 100 —Å–º–∞–π–ª–∏–∫–æ–≤ –∂–∞–ª–∫–æ?",
    "–ê –∫–∞–∫–∞—è —É —Ç–µ–±—è –ª–∏–≥–∞?",
    "–•–æ—á–µ—à—å +1–º–ª—Ä–¥ –Ω–∞ –∫–ª–∏–∫?",
    "–ù–µ –ø–æ–ª—É—á–∏—à—å!",
    "–õ–æ–ª!",
    "–ê —Ç—ã –∑–Ω–∞–ª —á—Ç–æ –¥—ã—à–∞—Ç—å —á–µ—Ä–µ–∑ –Ω–æ—Å —Å –≤—ã—Å—É–Ω—É—Ç—ã–º —è–∑—ã–∫–æ–º –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ",
    "–ù—É —á—Ç–æ?",
    "–î–∞ –ª–∞–¥–Ω–æ, —á–µ–ª, –º—ã –æ–±–∞ –∑–Ω–∞–µ–º —á—Ç–æ –º–æ–∂–Ω–æ",
    "–ê—Ö–∞—Ö–∞—Ö–∞—Ö–∞—Ö–∞—Ö—Ö–∞—Ö–∞",
    "–ó–Ω–∞–µ—à—å —á—Ç–æ...",
    "–ï—Å–ª–∏ —Ç—ã —Ä–µ–∞–ª—å–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª —Ç–æ —Ç—ã –±—ã–ª –ø–æ—Ö–æ–∂ –Ω–∞ —Å–æ–±–∞–∫—É",
    "–ù–µ –æ–±–∏–∂–∞–π—Å—è —á—Ç–æ —è —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—é —Å —Ç–æ–±–æ–π –≤ –º—É–∂—Å–∫–æ–º —Ä–æ–¥–µ –µ—Å–ª–∏ —Ç—ã –¥–µ–≤–æ—á–∫–∞, –æ–∫?",
    "–õ–∞–¥–Ω–æ, –∏–¥–∏ –ø–æ–∫—É–ø–∞–π —É–¥–ª—É—á—à–µ–Ω–∏—è!",
    ":)",
    "–ö—É–ø–∏ –∫–µ–π—Å!",
    "–°–µ–π—á–∞—Å–∂–µ!",
    "–ì–æ—Ä–æ—Ö–æ—Å—Ç—Ä–µ–ª –≤ —Å—Ç–æ—Ä–∫–µ!",
    "–Ø –ø–æ—à—É—Ç–∏–ª.",
    "...",
    "....",
    ".....",
    "......",
    ".......",
    "–û–π.",
    "–ù—É —á—Ç–æ —Ç—É—Ç —É —Ç–µ–±—è?",
    "–û–≥–æ —Ç—ã –Ω–∞–∫–æ–ø–∏–ª!",
    "–ü–æ –º–æ–µ–º—É —Ç—ã —á–∏—Ç–µ—Ä–∏—à—å",
    "–•–æ—Ç—è –Ω–µ—Ç, —Ç—É—Ç –µ—Å—Ç—å –∞–Ω—Ç–∏—á–∏—Ç >:)",
    "–ó–Ω–∞–µ—à—å —á—Ç–æ...",
    "–û—Ç–∫—Ä—ã–≤–∞–π –∫–µ–π—Å—ã –¥–ª—è —Ä–µ–¥–∫–∏—Ö —ç–º–æ—Ü–∏–π!",
    "–ë–µ–≥–æ–º!",
    "–•—ç–ª–ª–æ—É–∏–Ω —Å–∫–æ—Ä–æ...",
    "–û–π —Ç–æ–µ—Å—Ç—å —Ç—ã–∫–≤–µ–Ω–Ω—ã–π —Å–ø–∞—Å!",
    "–ì—Ä—è–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –•—ç–ª–ª–æ—É–∏—Å–∫–∏–π –∏–≤–µ–Ω—Ç 1/2!",
    "–û–Ω–æ —Å–∫–æ—Ä–æ....",
    "–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ",
    "–•–æ—á—É –µ—Å—Ç—å",
    "–•–æ—á—É –ø–∏—Ç—å",
    "–î–∞–π –µ–¥—ã!",
    "–ì–æ—Ä–æ—Ö–æ—Å—Ç—Ä–µ–ª —ç—Ç–æ —Å–∞–º–æ–µ –¥–æ—Ä–æ–≥–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ!",
    "–¢—ã –∏–≥—Ä–∞–ª –≤ –ì–æ—Ä–æ—Ö–æ—Å—Ç—Ä–µ–ª –∫–ª–∏–∫–µ—Ä?",
    "–ó–∞–≥–ª—è–Ω–∏ –≤ –∏–Ω—Ñ–æ, —Ç–∞–º —Å—Å—ã–ª–∫–∞",
    "–ó–æ–º–±–∏—Å–∞—Ä–∫–æ–º–∏–Ω!",
    "–Ø –Ω–µ –≤–∏–∂—É—É –ø—Ä–∏—á–∏–∏–Ω –¥—É–º–∞—Ç—å —Ç–æ —á—Ç–æ —Ç—ã –æ–¥–∏–∏–Ω...",
    "–û–π.",
    "–û—Å–∫–æ–ª–∫–∏ –º–∞—Å—Ç–µ—Ä–∞ ‚Äî —Ö–æ—Ä–æ—à–∞—è –≤–µ—â—å!",
    "–ó–Ω–∞–µ—à—å –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –æ—Å–∫–æ–ª–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞?",
    "–û—Ç–∫—Ä—ã–≤–∞–π –∫–µ–π—Å—ã!",
    "Starfoxy...............",
    "–ì—Ä—É—Å—Ç–Ω–æ...",
    "–ù—É –ª–∞–¥–Ω–æ, –Ω–µ –±—É–¥–µ–º –æ–± —ç—Ç–æ–º!",
    "–ó–Ω–∞–µ—à—å —á—Ç–æ?",
    "üòâ –î–µ—Ä–∂–∏",
    "–û–∫, –º–Ω–µ –ª–µ–Ω—å –¥–µ–ª–∞—Ç—å –±–æ–ª—å—à–µ —Ä–µ–ø–ª–∏–∫",
    "–ù—É –≤—Å—ë, –∑–∞ –≤—Å–µ —Ä–µ–ø–ª–∏–∫–∏ –ø–æ–π–¥—É—Ç –∑–∞–Ω–æ–≤–æ"
];
let currentReplicaIndex = 0;

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const smileysElement = document.getElementById('smileys');
const dollarsElement = document.getElementById('dollars');
const smileysPerClickElement = document.getElementById('smileys-per-click');
const passiveIncomeElement = document.getElementById('passive-income');
const duplicateShardsElement = document.getElementById('duplicate-shards');
const masteryShardsElement = document.getElementById('mastery-shards');
const mainSmileyElement = document.getElementById('main-smiley');
const upgradesGrid = document.getElementById('upgrades-grid');
const casesGrid = document.getElementById('cases-grid');
const shopGrid = document.getElementById('shop-grid');
const inventoryGrid = document.getElementById('inventory-grid');
const exchangeAmountInput = document.getElementById('exchange-amount');
const exchangeBtn = document.getElementById('exchange-btn');
const exchangeResult = document.getElementById('exchange-result');
const notification = document.getElementById('notification');
const antiCheatWarning = document.getElementById('anti-cheat-warning');
const cheatTimer = document.getElementById('cheat-timer');
const replicaElement = document.getElementById('replica');
const currentLeagueElement = document.getElementById('current-league');
const clicksToNextElement = document.getElementById('clicks-to-next');
const leagueNameElement = document.getElementById('league-name');
const leagueProgressElement = document.getElementById('league-progress');
const leagueProgressTextElement = document.getElementById('league-progress-text');
const templeMasteryShardsElement = document.getElementById('temple-mastery-shards');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
    loadGame();
    updateUI();
    setupEventListeners();
    renderUpgrades();
    renderCases();
    renderShop();
    updateInventory();
    updateLeagues();
    startPassiveIncome();
    startAntiCheatSystem();
    startReplicaSystem();
    checkCheatBlock();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏–≥—Ä—ã
function loadGame() {
    const savedGame = localStorage.getItem('smileyClicker');
    if (savedGame) {
        const loadedState = JSON.parse(savedGame);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —É–ª—É—á—à–µ–Ω–∏–π
        Object.keys(gameState.upgrades).forEach(key => {
            if (loadedState.upgrades && loadedState.upgrades[key]) {
                gameState.upgrades[key].level = loadedState.upgrades[key].level || 0;
                gameState.upgrades[key].cost = loadedState.upgrades[key].cost || gameState.upgrades[key].cost;
            }
        });
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        gameState.smileys = loadedState.smileys || 100;
        gameState.dollars = loadedState.dollars || 0;
        gameState.smileysPerClick = loadedState.smileysPerClick || 1;
        gameState.passiveIncome = loadedState.passiveIncome || 0;
        gameState.currentSmiley = loadedState.currentSmiley || 'üòÄ';
        gameState.ownedEmotions = loadedState.ownedEmotions || ['üòÄ'];
        gameState.inventory = loadedState.inventory || {};
        gameState.emotionLevels = loadedState.emotionLevels || {};
        gameState.totalClicks = loadedState.totalClicks || 0;
        gameState.duplicateShards = loadedState.duplicateShards || 0;
        gameState.masteryShards = loadedState.masteryShards || 0;
        gameState.currentLeague = loadedState.currentLeague || 'bronze';
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        cheatBlockTime = loadedState.cheatBlockTime || 0;
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Ä–æ–≤–Ω–∏ —ç–º–æ—Ü–∏–π
    gameState.ownedEmotions.forEach(emotion => {
        if (!gameState.emotionLevels[emotion]) {
            gameState.emotionLevels[emotion] = 1;
        }
    });
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã
function saveGame() {
    const saveData = {
        ...gameState,
        cheatBlockTime: cheatBlockTime
    };
    localStorage.setItem('smileyClicker', JSON.stringify(saveData));
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ö–ª–∏–∫ –ø–æ —Å–º–∞–π–ª–∏–∫—É
    mainSmileyElement.addEventListener('click', handleSmileyClick);
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
    document.querySelectorAll('.tab').forEach(tab => {
        tab.addEventListener('click', () => {
            const tabId = tab.getAttribute('data-tab');
            switchTab(tabId);
        });
    });
    
    // –û–±–º–µ–Ω —Å–º–∞–π–ª–∏–∫–æ–≤ –Ω–∞ –¥–æ–ª–ª–∞—Ä—ã
    exchangeBtn.addEventListener('click', handleExchange);
    
    // –ü–æ–∫—É–ø–∫–∞ –≤ —Ö—Ä–∞–º–µ –º–∞—Å—Ç–µ—Ä–∞
    document.querySelectorAll('.temple-buy-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            const itemId = e.target.getAttribute('data-item');
            buyTempleItem(itemId);
        });
    });
    
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    setInterval(saveGame, 10000);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Å–º–∞–π–ª–∏–∫—É
function handleSmileyClick() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –æ—Ç –∞–Ω—Ç–∏—á–∏—Ç–∞
    if (cheatBlockTime > Date.now()) {
        showNotification('–ò–≥—Ä–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞!', 'error');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä
    if (cheatDetectionActive) {
        showNotification('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–ª–∏–∫–æ–≤! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.', 'error');
        return;
    }
    
    const currentTime = Date.now();
    const timeDiff = currentTime - lastClickTime;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫–ª–∏–∫–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
    clickTimes.push(currentTime);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 –∫–ª–∏–∫–∞–º–∏
    if (clickTimes.length > 10) {
        clickTimes.shift();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞ (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã)
    if (clickTimes.length >= 5) {
        const intervals = [];
        for (let i = 1; i < clickTimes.length; i++) {
            intervals.push(clickTimes[i] - clickTimes[i-1]);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã (—Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–Ω–µ–µ 10–º—Å)
        const firstInterval = intervals[0];
        const allSimilar = intervals.every(interval => Math.abs(interval - firstInterval) < 10);
        
        if (allSimilar) {
            activateCheatBlock();
            return;
        }
    }
    
    // –ï—Å–ª–∏ –∫–ª–∏–∫–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∑–∞—â–∏—Ç—É
    if (timeDiff < 70) {
        clickCount++;
        if (clickCount > 5) {
            activateCheatDetection();
            return;
        }
    } else {
        clickCount = 0;
    }
    
    lastClickTime = currentTime;
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤
    gameState.totalClicks++;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–º–∞–π–ª–∏–∫–∏
    gameState.smileys += gameState.smileysPerClick;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ª–ª–∞—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ
    if (gameState.upgrades['dollar-boost'].level > 0) {
        gameState.dollars += gameState.upgrades['dollar-boost'].effect * gameState.upgrades['dollar-boost'].level;
    }
    
    // –ü–æ–≤—ã—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Ç–µ–∫—É—â–µ–π —ç–º–æ—Ü–∏–∏
    increaseEmotionLevel(gameState.currentSmiley);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—É—é –ª–∏–≥—É
    checkLeagueUpgrade();
    
    updateUI();
    updateAllBuyButtons();
}

// –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —ç–º–æ—Ü–∏–∏
function increaseEmotionLevel(emotion) {
    if (!gameState.emotionLevels[emotion]) {
        gameState.emotionLevels[emotion] = 1;
    }
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Å —à–∞–Ω—Å–æ–º 10%
    if (Math.random() < 0.1) {
        gameState.emotionLevels[emotion]++;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 100 —É—Ä–æ–≤–Ω—è
        if (gameState.emotionLevels[emotion] === 100) {
            gameState.masteryShards++;
            showNotification(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –≠–º–æ—Ü–∏—è ${emotion} –¥–æ—Å—Ç–∏–≥–ª–∞ 100 —É—Ä–æ–≤–Ω—è! –ü–æ–ª—É—á–µ–Ω –æ—Å–∫–æ–ª–æ–∫ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞.`, 'success');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç
        if (document.getElementById('inventory-tab').classList.contains('active')) {
            updateInventory();
        }
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –Ω–æ–≤—É—é –ª–∏–≥—É
function checkLeagueUpgrade() {
    const leagueKeys = Object.keys(leagues);
    const currentIndex = leagueKeys.indexOf(gameState.currentLeague);
    
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ª–∏–≥–∞
    if (currentIndex < leagueKeys.length - 1) {
        const nextLeague = leagueKeys[currentIndex + 1];
        const nextLeagueReq = leagues[nextLeague].clicks;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –º—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ª–∏–≥–∏
        if (gameState.totalClicks >= nextLeagueReq) {
            gameState.currentLeague = nextLeague;
            gameState.masteryShards += 10;
            showNotification(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–≥–∏ ${leagues[nextLeague].name}! –ü–æ–ª—É—á–µ–Ω–æ 10 –æ—Å–∫–æ–ª–∫–æ–≤ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞.`, 'success');
            updateLeagues();
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–≥–∞—Ö
function updateLeagues() {
    const currentLeagueData = leagues[gameState.currentLeague];
    currentLeagueElement.textContent = currentLeagueData.name;
    leagueNameElement.textContent = currentLeagueData.name;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –ª–∏–≥—É –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
    const leagueKeys = Object.keys(leagues);
    const currentIndex = leagueKeys.indexOf(gameState.currentLeague);
    
    if (currentIndex < leagueKeys.length - 1) {
        const nextLeague = leagueKeys[currentIndex + 1];
        const nextLeagueReq = leagues[nextLeague].clicks;
        const currentLeagueReq = leagues[gameState.currentLeague].clicks;
        
        const progress = ((gameState.totalClicks - currentLeagueReq) / (nextLeagueReq - currentLeagueReq)) * 100;
        leagueProgressElement.style.width = `${Math.min(progress, 100)}%`;
        
        const clicksLeft = nextLeagueReq - gameState.totalClicks;
        clicksToNextElement.textContent = clicksLeft > 0 ? clicksLeft : 0;
        leagueProgressTextElement.textContent = `${gameState.totalClicks - currentLeagueReq}/${nextLeagueReq - currentLeagueReq} –∫–ª–∏–∫–æ–≤`;
    } else {
        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ª–∏–≥–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞
        leagueProgressElement.style.width = '100%';
        clicksToNextElement.textContent = '0';
        leagueProgressTextElement.textContent = '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ª–∏–≥–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!';
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ª–∏–≥
    document.querySelectorAll('.league-item').forEach(item => {
        const leagueId = item.getAttribute('data-league');
        const leagueReq = leagues[leagueId].clicks;
        
        item.classList.remove('active', 'unlocked');
        
        if (leagueId === gameState.currentLeague) {
            item.classList.add('active');
        } else if (gameState.totalClicks >= leagueReq) {
            item.classList.add('unlocked');
        }
    });
}

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–∞ —á–∏—Ç—ã
function activateCheatBlock() {
    cheatBlockTime = Date.now() + 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
    antiCheatWarning.style.display = 'block';
    updateCheatTimer();
    saveGame();
    
    const timerInterval = setInterval(() => {
        if (cheatBlockTime <= Date.now()) {
            clearInterval(timerInterval);
            antiCheatWarning.style.display = 'none';
            cheatBlockTime = 0;
            saveGame();
        } else {
            updateCheatTimer();
        }
    }, 1000);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
function updateCheatTimer() {
    const timeLeft = Math.max(0, cheatBlockTime - Date.now());
    const minutes = Math.floor(timeLeft / 60000);
    const seconds = Math.floor((timeLeft % 60000) / 1000);
    cheatTimer.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
function checkCheatBlock() {
    if (cheatBlockTime > Date.now()) {
        antiCheatWarning.style.display = 'block';
        updateCheatTimer();
        
        const timerInterval = setInterval(() => {
            if (cheatBlockTime <= Date.now()) {
                clearInterval(timerInterval);
                antiCheatWarning.style.display = 'none';
                cheatBlockTime = 0;
                saveGame();
            } else {
                updateCheatTimer();
            }
        }, 1000);
    }
}

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∑–∞—â–∏—Ç—ã –æ—Ç –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞
function activateCheatDetection() {
    cheatDetectionActive = true;
    showNotification('–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!', 'error');
    
    setTimeout(() => {
        cheatDetectionActive = false;
        clickCount = 0;
    }, 5000);
}

// –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∞–Ω—Ç–∏-—á–∏—Ç–∞
function startAntiCheatSystem() {
    // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –∫–ª–∏–∫–æ–≤ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    setInterval(() => {
        if (clickCount > 0) {
            clickCount = Math.max(0, clickCount - 2);
        }
    }, 1000);
}

// –°–∏—Å—Ç–µ–º–∞ —Ä–µ–ø–ª–∏–∫
function startReplicaSystem() {
    updateReplica();
    setInterval(updateReplica, 10000); // –°–º–µ–Ω–∞ —Ä–µ–ø–ª–∏–∫ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–ª–∏–∫–∏
function updateReplica() {
    const replica = replicas[currentReplicaIndex];
    replicaElement.textContent = replica;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–ø–ª–∏–∫–∏
    if (replica.includes('üòâ') && !gameState.ownedEmotions.includes('üòâ')) {
        gameState.ownedEmotions.push('üòâ');
        if (!gameState.inventory['üòâ']) {
            gameState.inventory['üòâ'] = 0;
        }
        gameState.inventory['üòâ'] += 1;
        updateInventory();
        showNotification('–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥–º–∏–≥–∏–≤–∞—é—â–∏–π —Å–º–∞–π–ª–∏–∫!', 'success');
    }
    
    currentReplicaIndex = (currentReplicaIndex + 1) % replicas.length;
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
function switchTab(tabId) {
    document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.remove('active');
    });
    
    document.getElementById(`${tabId}-tab`).classList.add('active');
    
    document.querySelectorAll('.tab').forEach(tab => {
        tab.classList.remove('active');
    });
    document.querySelector(`.tab[data-tab="${tabId}"]`).classList.add('active');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ö—Ä–∞–º–µ –º–∞—Å—Ç–µ—Ä–∞
    if (tabId === 'master-temple') {
        templeMasteryShardsElement.textContent = gameState.masteryShards;
    }
    
    updateAllBuyButtons();
}

// –û–±–º–µ–Ω —Å–º–∞–π–ª–∏–∫–æ–≤ –Ω–∞ –¥–æ–ª–ª–∞—Ä—ã
function handleExchange() {
    const amount = parseInt(exchangeAmountInput.value);
    if (isNaN(amount) || amount < 100) {
        showNotification('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ - 100 —Å–º–∞–π–ª–∏–∫–æ–≤!', 'error');
        return;
    }
    
    if (amount > gameState.smileys) {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–º–∞–π–ª–∏–∫–æ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞!', 'error');
        return;
    }
    
    const dollars = Math.floor(amount / 100);
    gameState.smileys -= dollars * 100;
    gameState.dollars += dollars;
    
    updateUI();
    exchangeResult.textContent = `–û–±–º–µ–Ω—è–Ω–æ ${dollars * 100} —Å–º–∞–π–ª–∏–∫–æ–≤ –Ω–∞ $${dollars}`;
    exchangeAmountInput.value = '';
    showNotification(`–£—Å–ø–µ—à–Ω–æ –æ–±–º–µ–Ω—è–Ω–æ –Ω–∞ $${dollars}!`, 'success');
    updateAllBuyButtons();
}

// –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥
function startPassiveIncome() {
    setInterval(() => {
        if (gameState.passiveIncome > 0) {
            gameState.smileys += gameState.passiveIncome;
            updateUI();
            updateAllBuyButtons();
        }
    }, 1000);
}

// –ü–æ–∫—É–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è
function buyUpgrade(upgradeId) {
    const upgrade = gameState.upgrades[upgradeId];
    const currency = upgrade.currency || 'smileys';
    
    if (gameState[currency] >= upgrade.cost) {
        gameState[currency] -= upgrade.cost;
        upgrade.level += 1;
        
        // –ü–æ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ 15%
        upgrade.cost = Math.floor(upgrade.cost * 1.20);
        
        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ —É–ª—É—á—à–µ–Ω–∏—è
        if (upgradeId === 'click-power') {
            gameState.smileysPerClick += upgrade.effect;
        } else if (upgradeId === 'auto-clicker') {
            gameState.passiveIncome += upgrade.effect;
        } else if (upgradeId === 'double-click') {
            gameState.smileysPerClick *= upgrade.effect;
        } else if (upgradeId === 'mega-click') {
            gameState.smileysPerClick += upgrade.effect;
        }
        // –î–æ–ª–ª–∞—Ä–æ–≤—ã–π –±—É—Å—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ handleSmileyClick
        
        updateUI();
        renderUpgrades();
        updateAllBuyButtons();
        showNotification(`–£–ª—É—á—à–µ–Ω–∏–µ "${upgrade.name}" –∫—É–ø–ª–µ–Ω–æ!`, 'success');
    } else {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!', 'error');
    }
}

// –ü–æ–∫—É–ø–∫–∞ —ç–º–æ—Ü–∏–∏ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞
function buyEmotion(emotion) {
    const emotionData = gameState.shop[emotion];
    const currency = emotionData.currency || 'smileys';
    
    if (gameState[currency] >= emotionData.cost) {
        gameState[currency] -= emotionData.cost;
        
        if (!gameState.ownedEmotions.includes(emotion)) {
            gameState.ownedEmotions.push(emotion);
        }
        
        if (!gameState.inventory[emotion]) {
            gameState.inventory[emotion] = 0;
            gameState.emotionLevels[emotion] = 1;
        }
        gameState.inventory[emotion] += 1;
        
        updateUI();
        renderShop();
        updateInventory();
        updateAllBuyButtons();
        showNotification(`–≠–º–æ—Ü–∏—è "${emotionData.name}" –∫—É–ø–ª–µ–Ω–∞!`, 'success');
    } else {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!', 'error');
    }
}

// –ü–æ–∫—É–ø–∫–∞ –∫–µ–π—Å–∞
function buyCase(caseId) {
    const caseData = gameState.cases[caseId];
    const currency = caseData.currency || 'smileys';
    
    if (gameState[currency] >= caseData.cost) {
        gameState[currency] -= caseData.cost;
        
        let randomIndex = Math.floor(Math.random() * caseData.emotions.length);
        let emotion = caseData.emotions[randomIndex];
        
        if (caseId === 'cool' && Math.random() < 0.001) {
            emotion = 'ü§Ø';
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–∞ —ç–º–æ—Ü–∏—è
        const isDuplicate = gameState.ownedEmotions.includes(emotion);
        
        if (!isDuplicate) {
            gameState.ownedEmotions.push(emotion);
        } else {
            // –î–∞–µ–º –æ—Å–∫–æ–ª–æ–∫ –¥—É–±–ª–∏–∫–∞—Ç–∞ –∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é —ç–º–æ—Ü–∏—é
            gameState.duplicateShards += 1;
            showNotification('–ü–æ–ª—É—á–µ–Ω –æ—Å–∫–æ–ª–æ–∫ –¥—É–±–ª–∏–∫–∞—Ç–∞ –∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é —ç–º–æ—Ü–∏—é!', 'info');
        }
        
        if (!gameState.inventory[emotion]) {
            gameState.inventory[emotion] = 0;
            gameState.emotionLevels[emotion] = 1;
        }
        gameState.inventory[emotion] += 1;
        
        updateUI();
        updateInventory();
        updateAllBuyButtons();
        showNotification(`–í—ã –ø–æ–ª—É—á–∏–ª–∏: ${emotion} –∏–∑ –∫–µ–π—Å–∞ "${caseData.name}"!`, 'success');
    } else {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!', 'error');
    }
}

// –ü–æ–∫—É–ø–∫–∞ –≤ —Ö—Ä–∞–º–µ –º–∞—Å—Ç–µ—Ä–∞
function buyTempleItem(itemId) {
    const item = gameState.templeShop[itemId];
    
    if (gameState.masteryShards >= item.cost) {
        gameState.masteryShards -= item.cost;
        
        if (item.type === 'upgrade') {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ
            gameState.smileysPerClick += item.effect;
            showNotification(`–£–ª—É—á—à–µ–Ω–∏–µ "${item.name}" –∫—É–ø–ª–µ–Ω–æ!`, 'success');
        } else if (item.type === 'emotion') {
            // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏—é
            if (!gameState.ownedEmotions.includes(item.emotion)) {
                gameState.ownedEmotions.push(item.emotion);
            }
            
            if (!gameState.inventory[item.emotion]) {
                gameState.inventory[item.emotion] = 0;
                gameState.emotionLevels[item.emotion] = 1;
            }
            gameState.inventory[item.emotion] += 1;
            
            showNotification(`–≠–º–æ—Ü–∏—è "${item.name}" –∫—É–ø–ª–µ–Ω–∞!`, 'success');
            updateInventory();
        }
        
        updateUI();
        templeMasteryShardsElement.textContent = gameState.masteryShards;
        showNotification(`–ü—Ä–µ–¥–º–µ—Ç "${item.name}" –∫—É–ø–ª–µ–Ω!`, 'success');
    } else {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Å–∫–æ–ª–∫–æ–≤ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞!', 'error');
    }
}

// –°–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–º–∞–π–ª–∏–∫–∞
function setCurrentSmiley(emotion) {
    gameState.currentSmiley = emotion;
    mainSmileyElement.textContent = emotion;
    showNotification(`–°–º–∞–π–ª–∏–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${emotion}`, 'info');
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π
function renderUpgrades() {
    upgradesGrid.innerHTML = '';
    
    for (const [id, upgrade] of Object.entries(gameState.upgrades)) {
        const upgradeElement = document.createElement('div');
        upgradeElement.className = 'upgrade';
        
        const currency = upgrade.currency === 'dollars' ? '$' : '';
        
        upgradeElement.innerHTML = `
            <div class="upgrade-icon">üîß</div>
            <div class="upgrade-name">${upgrade.name} –£—Ä. ${upgrade.level}</div>
            <div class="upgrade-desc">${upgrade.description}</div>
            <div class="upgrade-cost">${currency}${upgrade.cost} ${upgrade.currency === 'dollars' ? '–¥–æ–ª–ª–∞—Ä–æ–≤' : '—Å–º–∞–π–ª–∏–∫–æ–≤'}</div>
            <button class="buy-btn" ${gameState[upgrade.currency || 'smileys'] < upgrade.cost ? 'disabled' : ''}>
                –ö—É–ø–∏—Ç—å
            </button>
        `;
        
        upgradeElement.querySelector('.buy-btn').addEventListener('click', () => buyUpgrade(id));
        upgradesGrid.appendChild(upgradeElement);
    }
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–µ–π—Å–æ–≤
function renderCases() {
    casesGrid.innerHTML = '';
    
    for (const [id, caseData] of Object.entries(gameState.cases)) {
        const caseElement = document.createElement('div');
        caseElement.className = 'case-item';
        
        const currency = caseData.currency === 'dollars' ? '$' : '';
        
        caseElement.innerHTML = `
            <div class="case-icon">üéÅ</div>
            <div class="case-name">${caseData.name}</div>
            <div class="case-desc">–°–æ–¥–µ—Ä–∂–∏—Ç —Å–ª—É—á–∞–π–Ω—É—é —ç–º–æ—Ü–∏—é</div>
            <div class="case-cost">${currency}${caseData.cost} ${caseData.currency === 'dollars' ? '–¥–æ–ª–ª–∞—Ä–æ–≤' : '—Å–º–∞–π–ª–∏–∫–æ–≤'}</div>
            <button class="buy-btn" ${gameState[caseData.currency || 'smileys'] < caseData.cost ? 'disabled' : ''}>
                –ö—É–ø–∏—Ç—å
            </button>
        `;
        
        caseElement.querySelector('.buy-btn').addEventListener('click', () => buyCase(id));
        casesGrid.appendChild(caseElement);
    }
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞
function renderShop() {
    shopGrid.innerHTML = '';
    
    for (const [emotion, data] of Object.entries(gameState.shop)) {
        const emotionElement = document.createElement('div');
        emotionElement.className = 'emotion';
        
        const isOwned = gameState.ownedEmotions.includes(emotion);
        const currency = data.currency === 'dollars' ? '$' : data.currency === 'duplicateShards' ? '' : '';
        const currencyText = data.currency === 'dollars' ? '–¥–æ–ª–ª–∞—Ä–æ–≤' : data.currency === 'duplicateShards' ? '–æ—Å–∫–æ–ª–∫–æ–≤ –¥—É–±–ª–∏–∫–∞—Ç–∞' : '—Å–º–∞–π–ª–∏–∫–æ–≤';
        
        emotionElement.innerHTML = `
            <div class="emotion-icon">${emotion}</div>
            <div class="emotion-name">${data.name}</div>
            <div class="emotion-desc">${data.description}</div>
            <div class="emotion-cost">${currency}${data.cost} ${currencyText}</div>
            <button class="buy-btn" ${gameState[data.currency || 'smileys'] < data.cost ? 'disabled' : ''}>
                ${isOwned ? '–ü–æ–ª—É—á–∏—Ç—å –µ—â–µ' : '–ö—É–ø–∏—Ç—å'}
            </button>
            ${isOwned ? `<button class="buy-btn" style="margin-top: 5px; background: rgba(33, 150, 243, 0.7);">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å</button>` : ''}
        `;
        
        emotionElement.querySelectorAll('.buy-btn')[0].addEventListener('click', () => buyEmotion(emotion));
        
        if (isOwned) {
            emotionElement.querySelectorAll('.buy-btn')[1].addEventListener('click', () => setCurrentSmiley(emotion));
        }
        
        shopGrid.appendChild(emotionElement);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
function updateInventory() {
    inventoryGrid.innerHTML = '';
    
    for (const [emotion, count] of Object.entries(gameState.inventory)) {
        if (count > 0) {
            const inventoryItem = document.createElement('div');
            inventoryItem.className = 'inventory-item';
            
            const level = gameState.emotionLevels[emotion] || 1;
            
            inventoryItem.innerHTML = `
                <div class="inventory-icon">${emotion}</div>
                <div>${gameState.shop[emotion]?.name || emotion}</div>
                <div class="emotion-level">–£—Ä. ${level}</div>
                <div class="inventory-count">x${count}</div>
                <button class="buy-btn" style="background: rgba(33, 150, 243, 0.7);">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å</button>
            `;
            
            inventoryItem.querySelector('.buy-btn').addEventListener('click', () => setCurrentSmiley(emotion));
            inventoryGrid.appendChild(inventoryItem);
        }
    }
    
    if (inventoryGrid.children.length === 0) {
        inventoryGrid.innerHTML = '<p>–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç</p>';
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUI() {
    smileysElement.textContent = gameState.smileys.toLocaleString();
    dollarsElement.textContent = gameState.dollars.toLocaleString();
    smileysPerClickElement.textContent = gameState.smileysPerClick;
    passiveIncomeElement.textContent = gameState.passiveIncome;
    duplicateShardsElement.textContent = gameState.duplicateShards;
    masteryShardsElement.textContent = gameState.masteryShards;
    mainSmileyElement.textContent = gameState.currentSmiley;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–≥–∞—Ö
    updateLeagues();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –ø–æ–∫—É–ø–∫–∏
function updateAllBuyButtons() {
    document.querySelectorAll('.upgrade .buy-btn').forEach(btn => {
        const upgradeElement = btn.closest('.upgrade');
        if (upgradeElement) {
            const costElement = upgradeElement.querySelector('.upgrade-cost');
            if (costElement) {
                const costText = costElement.textContent;
                const cost = parseInt(costText.replace(/\D/g, ''));
                const currency = costText.includes('$') ? 'dollars' : 'smileys';
                btn.disabled = gameState[currency] < cost;
            }
        }
    });
    
    document.querySelectorAll('.case-item .buy-btn').forEach(btn => {
        const caseElement = btn.closest('.case-item');
        if (caseElement) {
            const costElement = caseElement.querySelector('.case-cost');
            if (costElement) {
                const costText = costElement.textContent;
                const cost = parseInt(costText.replace(/\D/g, ''));
                const currency = costText.includes('$') ? 'dollars' : 'smileys';
                btn.disabled = gameState[currency] < cost;
            }
        }
    });
    
    document.querySelectorAll('.emotion .buy-btn').forEach(btn => {
        const emotionElement = btn.closest('.emotion');
        if (emotionElement) {
            const costElement = emotionElement.querySelector('.emotion-cost');
            if (costElement) {
                const costText = costElement.textContent;
                const cost = parseInt(costText.replace(/\D/g, ''));
                let currency = 'smileys';
                if (costText.includes('$')) currency = 'dollars';
                if (costText.includes('–æ—Å–∫–æ–ª–∫–æ–≤')) currency = 'duplicateShards';
                btn.disabled = gameState[currency] < cost;
            }
        }
    });
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
    notification.textContent = message;
    notification.className = 'notification';
    
    if (type === 'success') {
        notification.style.background = 'rgba(76, 175, 80, 0.9)';
    } else if (type === 'error') {
        notification.style.background = 'rgba(244, 67, 54, 0.9)';
    } else if (type === 'info') {
        notification.style.background = 'rgba(33, 150, 243, 0.9)';
    }
    
    notification.classList.add('show');
    
    setTimeout(() => {
        notification.classList.remove('show');
    }, 3000);
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('load', initGame);
